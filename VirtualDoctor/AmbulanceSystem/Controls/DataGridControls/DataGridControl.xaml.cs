using AmbulanceSystem.Shared;
using AmbulanceSystem.Shared.Config;
using AmbulanceSystem.Shared.OperationStatusHandling;
using AmbulanceSystem.Utils;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;

namespace AmbulanceSystem.Controls.DataGridControls
{
    /// <summary>
    /// Interaction logic for DataGridControl.xaml
    /// </summary>
    public partial class DataGridControl : UserControl, IThemeChangeable, ILanguageLocalizable
    {
        public DataGridControlElement DataGridControlElement { get; set; }

        private DataGridControl(DataGridControlElement dataGridControlElement) : base()
        {
            InitializeComponent();
            DataGridControlElement = dataGridControlElement;
            DataGridControlElement.DataGrid = DataGrid;
            DataGridControlElement.PageInfo = PageInfo;
            InitializeButtons();
        }

        public static async Task<DataGridControl> CreateDataGridControl(DataGridControlElement element)
        {
            DataGridControl control = new DataGridControl(element);
            await control.DataGridControlElement.Show();
            return control;
        }

        public void ClearSelectedItems()
        {
            for (int i = 0; i < DataGrid.SelectedItems.Count; ++i)
                DataGrid.SelectedItems.RemoveAt(i);
        }

        public async void Refresh()
        {
            await DataGridControlElement.Refresh();
        }

        public void InformAboutStatus(OperationStatus status)
        {
            if (status != null)
            {
                SolidColorBrush solidColorBrush = new SolidColorBrush();
                switch (status.AlertType)
                {
                    case AlertType.Success: solidColorBrush = CurrentDictionary.MergedDictionaries[0]["PrimaryColorBrush"] as SolidColorBrush; break;
                    case AlertType.Error: solidColorBrush.Color = Colors.Red; break;
                }
                MessageBorder.Background = solidColorBrush;
                MessageLabel.Content = status.Message;
                MessageViewBox.Visibility = Visibility.Visible;
            }
        }

        public void ChangeTheme()
        {
            CurrentDictionary.MergedDictionaries[0].Source = ThemeChanger.GetCurrentTheme().ToUri();
        }

        public void SwitchLanguage()
        {
            InitializeButtons();
            DataGridControlElement.InitializeColumns();
        }

        private void InitializeButtons()
        {
            First.Content = language.FirstPageButton;
            Last.Content = language.LastPageButton;
            Backwards.Content = language.BackwardsButton;
            Forward.Content = language.ForwardButton;
        }

        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            MessageViewBox.Visibility = Visibility.Collapsed;
        }

        private async void Last_Click(object sender, RoutedEventArgs e)
        {
            await DataGridControlElement.Last_Click(sender, e);
        }

        private async void Forward_Click(object sender, RoutedEventArgs e)
        {
            await DataGridControlElement.Forward_Click(sender, e);
        }

        private async void Backwards_Click(object sender, RoutedEventArgs e)
        {
            await DataGridControlElement.Backwards_Click(sender, e);
        }

        private async void First_Click(object sender, RoutedEventArgs e)
        {
            await DataGridControlElement.First_Click(sender, e);
        }


        private void DataGrid_AutoGeneratedColumns(object sender, System.EventArgs e)
        {
            DataGridControlElement.InitializeColumns();
        }
    }
}
